{"version":3,"file":"scrollmagic.esm.js","sources":["../../src/scrollmagic/util/typeguards.ts","../../src/scrollmagic/ScrollMagicEvent.ts","../../src/scrollmagic/EventDispatcher.ts","../../src/scrollmagic/util/debounce.ts","../../src/scrollmagic/util/getDimensions.ts","../../src/scrollmagic/util/getScrollPos.ts","../../src/scrollmagic/util/registerEvent.ts","../../src/scrollmagic/util/throttleRaf.ts","../../src/scrollmagic/Container.ts","../../src/scrollmagic/ScrollMagicError.ts","../../src/scrollmagic/ContainerProxy.ts","../../src/scrollmagic/ExecutionQueue.ts","../../src/scrollmagic/Options.ts","../../src/scrollmagic/util/pickRelevantInfo.ts","../../src/scrollmagic/util/processProperties.ts","../../src/scrollmagic/util/transformers.ts","../../src/scrollmagic/Options.processors.ts","../../src/scrollmagic/util/sanitizeProperties.ts","../../src/scrollmagic/util/pickDifferencesFlat.ts","../../src/scrollmagic/util/roundToDecimals.ts","../../src/scrollmagic/ViewportObserver.ts","../../src/scrollmagic/ScrollMagic.ts"],"sourcesContent":["export const isNumber = (val: unknown): val is number => typeof val === 'number';\nexport const isString = (val: unknown): val is string => typeof val === 'string';\nexport const isUndefined = (val: unknown): val is undefined => undefined === val;\nexport const isNull = (val: unknown): val is null => null === val;\nexport const isWindow = (val: unknown): val is Window => val instanceof Window;\nexport const isDocument = (val: unknown): val is Document => val instanceof Document;\nexport const isHTMLElement = (val: unknown): val is HTMLElement => val instanceof HTMLElement;\nexport const isSVGElement = (val: unknown): val is SVGElement => val instanceof SVGElement;\n","import { DispatchableEvent } from './EventDispatcher';\nimport { ScrollMagic } from './ScrollMagic';\n\nexport enum ScrollMagicEventType {\n\tEnter = 'enter',\n\tLeave = 'leave',\n\tProgress = 'progress',\n}\n\nexport enum ScrollMagicEventScrollDirection {\n\tForward = 'forward',\n\tReverse = 'reverse',\n}\n\nexport enum ScrollMagicEventLocation {\n\tStart = 'start',\n\tInside = 'inside',\n\tEnd = 'end',\n}\n\nclass ScrollMagicEvent implements DispatchableEvent {\n\tpublic readonly direction: ScrollMagicEventScrollDirection;\n\tpublic readonly location: ScrollMagicEventLocation;\n\tconstructor(\n\t\tpublic readonly target: ScrollMagic,\n\t\tpublic readonly type: ScrollMagicEventType,\n\t\tmovingForward: boolean\n\t) {\n\t\tthis.location = (() => {\n\t\t\tif (ScrollMagicEventType.Progress === type) {\n\t\t\t\treturn ScrollMagicEventLocation.Inside;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t(ScrollMagicEventType.Enter === type && movingForward) ||\n\t\t\t\t(ScrollMagicEventType.Leave === type && !movingForward)\n\t\t\t) {\n\t\t\t\treturn ScrollMagicEventLocation.Start;\n\t\t\t}\n\t\t\treturn ScrollMagicEventLocation.End;\n\t\t})();\n\t\tthis.direction = movingForward\n\t\t\t? ScrollMagicEventScrollDirection.Forward\n\t\t\t: ScrollMagicEventScrollDirection.Reverse;\n\t}\n}\nexport default ScrollMagicEvent;\n","import { isUndefined } from './util/typeguards';\n\ntype EventType = string;\nexport interface DispatchableEvent {\n\treadonly target: any;\n\treadonly type: EventType;\n}\n\ntype Callback<E extends DispatchableEvent> = (event: E) => void;\nexport default class EventDispatcher {\n\tprivate callbacks = new Map<string, Callback<any>[]>();\n\n\t// adds a listener to the dispatcher. returns a function to reverse the effect.\n\tpublic addEventListener<T extends DispatchableEvent>(type: T['type'], cb: Callback<T>): () => void {\n\t\tlet list = this.callbacks.get(type);\n\t\tif (isUndefined(list)) {\n\t\t\tlist = [];\n\t\t\tthis.callbacks.set(type, list);\n\t\t}\n\t\tlist.push(cb);\n\t\treturn () => this.removeEventListener(type, cb);\n\t}\n\n\t// removes a listner from the dispatcher\n\tpublic removeEventListener<T extends DispatchableEvent>(type: T['type'], cb: Callback<T>): void {\n\t\tconst list = this.callbacks.get(type);\n\t\tif (isUndefined(list)) {\n\t\t\treturn;\n\t\t}\n\t\tconst remaining = list.filter(registeredCallback => registeredCallback !== cb);\n\t\tthis.callbacks.set(type, remaining);\n\t}\n\n\t// dispatches an event... DUH!\n\tpublic dispatchEvent(event: DispatchableEvent): void {\n\t\tconst list = this.callbacks.get(event.type);\n\t\tif (isUndefined(list)) {\n\t\t\treturn;\n\t\t}\n\t\tlist.forEach(cb => cb(event));\n\t}\n}\n","const debounce = <F extends (...args: any) => ReturnType<F>>(func: F, wait: number) => {\n\tlet timeoutId = 0; // setTimeout returns positive integer, so 0 represents no call requested\n\n\tconst debounced = function (this: ThisParameterType<F>, ...args: Parameters<F>) {\n\t\tclearTimeout(timeoutId);\n\t\ttimeoutId = window.setTimeout(() => {\n\t\t\ttimeoutId = 0;\n\t\t\tfunc.apply(this, args);\n\t\t}, wait);\n\t};\n\n\tdebounced.cancel = function () {\n\t\tclearTimeout(timeoutId);\n\t\ttimeoutId = 0;\n\t};\n\n\treturn debounced as ((...args: Parameters<F>) => ReturnType<F>) & { cancel: () => void };\n};\nexport default debounce;\n","import { isWindow } from './typeguards';\n\n// info limited to what we need...\nconst getDimensions = (\n\telement: Window | Element\n): { clientWidth: number; clientHeight: number; scrollWidth: number; scrollHeight: number } => {\n\tconst elem = isWindow(element) ? document.documentElement : element;\n\tconst { clientWidth, clientHeight, scrollHeight, scrollWidth } = elem;\n\treturn {\n\t\tclientWidth,\n\t\tclientHeight,\n\t\tscrollHeight,\n\t\tscrollWidth,\n\t};\n};\n\nexport default getDimensions;\n","import { isWindow } from './typeguards';\n\nconst scrollTop = (container: Window | Element): number =>\n\tisWindow(container) ? window.pageYOffset : container.scrollTop;\n\nconst scrollLeft = (container: Window | Element): number =>\n\tisWindow(container) ? window.pageXOffset : container.scrollLeft;\n\nconst getScrollPos = (container: Window | Element): { left: number; top: number } => ({\n\tleft: scrollLeft(container),\n\ttop: scrollTop(container),\n});\nexport default getScrollPos;\n","/**\n * Adds the passed listener as an event listener to the passed event target, and returns a function which reverses the\n * effect of this function.\n * @param {*} target object the listener should be attached to\n * @param {*} type type of listener\n * @param {*} listener callback\n * @param {*} options Event listener options\n */\nconst registerEvent = (\n\ttarget: GlobalEventHandlers,\n\ttype: keyof (GlobalEventHandlersEventMap & WindowEventMap), // this does not catch if the wrong event is used on the wrong target, but should be stricter than 'string'\n\tlistener: EventListenerOrEventListenerObject,\n\toptions?: boolean | AddEventListenerOptions\n): (() => void) => {\n\ttarget.addEventListener(type, listener, options);\n\treturn target.removeEventListener.bind(target, type, listener, options);\n};\n\nexport default registerEvent;\n","const throttleRaf = <F extends (...a: any) => any>(\n\tfunc: F\n): ((this: ThisParameterType<F>, ...args: Parameters<F>) => void) & {\n\tcancel: () => void;\n} => {\n\tlet requestId = 0; // rAF returns non-zero values, so 0 represents no request pending\n\n\tconst scheduled = function (this: ThisParameterType<F>, ...args: Parameters<F>) {\n\t\tif (0 !== requestId) {\n\t\t\treturn;\n\t\t}\n\t\trequestId = requestAnimationFrame(() => {\n\t\t\trequestId = 0;\n\t\t\tfunc.apply(this, args);\n\t\t});\n\t};\n\n\tscheduled.cancel = () => {\n\t\tcancelAnimationFrame(requestId);\n\t\trequestId = 0;\n\t};\n\treturn scheduled;\n};\n\nexport default throttleRaf;\n","import EventDispatcher, { DispatchableEvent } from './EventDispatcher';\nimport debounce from './util/debounce';\nimport getDimensions from './util/getDimensions';\nimport getScrollPos from './util/getScrollPos';\nimport registerEvent from './util/registerEvent';\nimport throttleRaf from './util/throttleRaf';\nimport { isWindow } from './util/typeguards';\n\nexport type ScrollParent = HTMLElement | Window;\n\ntype CleanUpFunction = () => void;\ntype ScrollDelta = {\n\tdeltaX: number;\n\tdeltaY: number;\n};\n\ntype EventType = 'scroll' | 'resize';\nexport class ContainerEvent implements DispatchableEvent {\n\tconstructor(\n\t\tpublic readonly target: Container,\n\t\tpublic readonly type: EventType,\n\t\tpublic readonly scrollDelta: ScrollDelta = { deltaX: 0, deltaY: 0 } // I could make an additional EventType only for Scroll Events, but we'll just ignore these for resize evnents...\n\t) {}\n}\n\nconst scroll = 'scroll';\nconst resize = 'resize';\n\nexport class Container {\n\tprivate dimensions = {\n\t\t// inner size excluding scrollbars\n\t\tclientWidth: 0,\n\t\tclientHeight: 0,\n\t\t// size of scrollable content\n\t\tscrollWidth: 0,\n\t\tscrollHeight: 0,\n\t};\n\tprivate scrollPos = {\n\t\ttop: 0,\n\t\tleft: 0,\n\t};\n\tprivate dispatcher = new EventDispatcher();\n\tprivate cleanups = new Array<CleanUpFunction>();\n\n\tconstructor(public readonly scrollParent: ScrollParent) {\n\t\tconst throttledScroll = throttleRaf(this.updateScrollPos.bind(this));\n\t\tconst throttledResize = debounce(this.updateDimensions.bind(this), 100);\n\t\tthis.cleanups.push(\n\t\t\tthrottledScroll.cancel,\n\t\t\tthrottledResize.cancel,\n\t\t\tthis.subscribeScroll(throttledScroll),\n\t\t\tthis.subscribeResize(throttledResize)\n\t\t);\n\t\tthis.updateScrollPos();\n\t\tthis.updateDimensions();\n\t}\n\n\tprivate updateScrollPos() {\n\t\tconst prevScrollPos = this.scrollPos;\n\t\tthis.scrollPos = getScrollPos(this.scrollParent);\n\t\tconst deltaY = this.scrollPos.top - prevScrollPos.top;\n\t\tconst deltaX = this.scrollPos.left - prevScrollPos.left;\n\t\tthis.dispatcher.dispatchEvent(new ContainerEvent(this, scroll, { deltaX, deltaY }));\n\t}\n\tprivate updateDimensions() {\n\t\tthis.dimensions = getDimensions(this.scrollParent);\n\t\tthis.dispatcher.dispatchEvent(new ContainerEvent(this, resize));\n\t}\n\n\t// subscribes to resize events of scrollParent and returns a function to reverse the effect\n\tprivate subscribeResize(onResize: () => void) {\n\t\tconst { scrollParent } = this;\n\t\tif (isWindow(scrollParent)) {\n\t\t\treturn registerEvent(scrollParent, resize, onResize);\n\t\t}\n\t\tconst observer = new ResizeObserver(onResize);\n\t\tobserver.observe(scrollParent);\n\t\treturn () => observer.unobserve(scrollParent);\n\t}\n\n\t// subscribes to scroll events of scrollParent and returns a function to reverse the effect\n\tprivate subscribeScroll(onScroll: () => void) {\n\t\treturn registerEvent(this.scrollParent, scroll, onScroll);\n\t}\n\n\t// subscribes Container and returns a function to reverse the effect\n\tpublic subscribe(type: EventType, cb: (e: ContainerEvent) => void): () => void {\n\t\treturn this.dispatcher.addEventListener(type, cb);\n\t}\n\n\tpublic get size(): Container['dimensions'] {\n\t\treturn this.dimensions;\n\t}\n\n\tpublic destroy(): void {\n\t\tthis.cleanups.forEach(cleanup => cleanup());\n\t\tthis.cleanups = [];\n\t}\n}\n","const SM = 'ScrollMagic';\nexport class ScrollMagicError extends Error {\n\tpublic readonly name = `${SM}Error`;\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t}\n}\nexport class ScrollMagicErrorInternal extends ScrollMagicError {\n\tconstructor(message: string) {\n\t\tsuper(`Internal Error: ${message}`);\n\t}\n}\nexport const failWith = (message: string): ScrollMagicError => {\n\treturn new ScrollMagicError(message);\n};\nexport const failWithInternal = (message: string): ScrollMagicErrorInternal => {\n\treturn new ScrollMagicErrorInternal(message);\n};\nexport const warn = (first: unknown, ...args: unknown[]): void => {\n\tconsole?.warn(`${SM} Warning: ${first}`, ...args);\n};\n","import { Container, ContainerEvent, ScrollParent } from './Container';\nimport { ScrollMagic } from './ScrollMagic';\nimport { failWithInternal } from './ScrollMagicError';\nimport { isUndefined } from './util/typeguards';\n\ntype EventCallback = (e: ContainerEvent) => void;\ntype CleanUpFunction = () => void;\n\nexport class ContainerProxy {\n\tprivate static cache = new Map<ScrollParent, [Container, Set<ScrollMagic>]>();\n\n\tprivate container?: Container;\n\tconstructor(private readonly scene: ScrollMagic) {}\n\tprivate unsubscribers = new Array<CleanUpFunction>();\n\n\tpublic attach(scrollParent: ScrollParent, onUpdate: EventCallback): void {\n\t\tif (!isUndefined(this.container)) {\n\t\t\tthis.detach();\n\t\t}\n\t\tlet cache = ContainerProxy.cache.get(scrollParent);\n\t\tif (isUndefined(cache)) {\n\t\t\tcache = [new Container(scrollParent), new Set()];\n\t\t\tContainerProxy.cache.set(scrollParent, cache);\n\t\t}\n\t\tconst [container, scenes] = cache;\n\t\tscenes.add(this.scene);\n\t\tthis.container = container;\n\t\tthis.unsubscribers = [container.subscribe('resize', onUpdate), container.subscribe('scroll', onUpdate)];\n\t}\n\n\tpublic detach(): void {\n\t\tif (isUndefined(this.container)) {\n\t\t\treturn;\n\t\t}\n\t\tconst { scrollParent } = this.container;\n\t\tconst cache = ContainerProxy.cache.get(scrollParent);\n\t\tif (isUndefined(cache)) {\n\t\t\tthrow failWithInternal('No cache info for scrollParent');\n\t\t}\n\t\tconst [container, scenes] = cache;\n\t\tscenes.delete(this.scene);\n\t\tthis.unsubscribers.forEach(unsubscribe => unsubscribe());\n\t\tthis.unsubscribers = [];\n\t\tif (scenes.size === 0) {\n\t\t\t// no more attached scenes\n\t\t\tcontainer.destroy();\n\t\t\tContainerProxy.cache.delete(scrollParent);\n\t\t}\n\t\tthis.container = undefined;\n\t}\n\n\tpublic get rect(): Container['size'] {\n\t\tif (isUndefined(this.container)) {\n\t\t\tthrow failWithInternal(`Can't get size when not attached to a container`);\n\t\t}\n\t\treturn this.container.size;\n\t}\n}\n","import throttleRaf from './util/throttleRaf';\nimport { isUndefined } from './util/typeguards';\n\ntype Command = () => void;\ntype ExecutionCondition = () => boolean;\ntype CommandList<T extends string> = Record<T, QueueItem>;\n\n/**\n * TODO! Update - this is very different now\n * Holds a list of commands and execute them in order.\n * If a command is added twice before executing, it will stay in the order position as before.\n * Caveats:\n * - can't override commands with existing precondition\n */\n\nclass QueueItem {\n\tprotected conditions: ExecutionCondition[] = [];\n\tconstructor(public readonly execute: Command, protected readonly onSchedule: () => void) {}\n\tpublic schedule(condition?: ExecutionCondition) {\n\t\tif (isUndefined(condition)) {\n\t\t\t// if no condition is provided, conditions are considered always met. Any conditions added after this won't even be run\n\t\t\tthis.conditions = [];\n\t\t\tcondition = () => true;\n\t\t}\n\t\tthis.conditions.push(condition);\n\t\tthis.onSchedule();\n\t}\n\tpublic resetConditions() {\n\t\tthis.conditions = [];\n\t}\n\tpublic get conditionsMet() {\n\t\treturn this.conditions.some(condition => condition());\n\t}\n}\n\nexport class ExecutionQueue<C extends string> {\n\tpublic readonly commands: CommandList<C>;\n\tprotected executeThrottled = throttleRaf(this.execute.bind(this));\n\n\tconstructor(queueItems: Record<C, Command>) {\n\t\tthis.commands = Object.entries<Command>(queueItems).reduce(\n\t\t\t(res, [name, command]) => ({\n\t\t\t\t...res,\n\t\t\t\t[name]: new QueueItem(command, this.executeThrottled),\n\t\t\t}),\n\t\t\t{} as CommandList<C>\n\t\t);\n\t}\n\n\t// executes all commands in the list in order, depending on wether or not their conditions are met\n\tpublic execute(): void {\n\t\tObject.values<QueueItem>(this.commands).forEach(item => {\n\t\t\tif (item.conditionsMet) {\n\t\t\t\titem.execute();\n\t\t\t}\n\t\t\titem.resetConditions();\n\t\t});\n\t}\n\tpublic cancel(): void {\n\t\tthis.executeThrottled.cancel();\n\t}\n}\n","type SameProperties<T extends { [K in keyof T]: unknown }, R extends { [K in keyof T]: unknown }> = R;\ntype ExtendProperty<T extends { [K in keyof T]: unknown }, K extends keyof T, E> = Omit<T, K> & { [X in K]: T[X] | E };\ntype ModifyProperty<T extends { [K in keyof T]: unknown }, K extends keyof T, E> = Omit<T, K> & { [X in K]: E };\ntype UnitString = `${number}px` | `${number}%`;\ntype CenterShorthand = 'center';\ntype CssSelector = string;\n\n// takes the width or height height of an element and returns the value that is used for position calculations\nexport type PixelConverterElement = (elementSize: number) => number;\nexport type PixelConverterScrollParent = (scrollParentSize: number) => number;\n\nexport type Public = {\n\telement: Element | CssSelector | null;\n\tscrollParent: Window | Document | Element | CssSelector;\n\tvertical: boolean;\n\ttriggerStart: number | UnitString | CenterShorthand | PixelConverterScrollParent | null;\n\ttriggerEnd: number | UnitString | CenterShorthand | PixelConverterScrollParent | null;\n\telementStart: number | UnitString | CenterShorthand | PixelConverterElement;\n\telementEnd: number | UnitString | CenterShorthand | PixelConverterElement;\n};\n\n// basically a normalized version of the options\nexport type Private = SameProperties<\n\tPublic,\n\t{\n\t\telement: HTMLElement | SVGElement;\n\t\tscrollParent: Window | HTMLElement;\n\t\tvertical: boolean;\n\t\ttriggerStart: PixelConverterScrollParent;\n\t\ttriggerEnd: PixelConverterScrollParent;\n\t\telementStart: PixelConverterElement;\n\t\telementEnd: PixelConverterElement;\n\t}\n>;\n\n// values that can be null after processing and need to be inferred, if still null\nexport type PrivateUninferred = ExtendProperty<Private, 'triggerStart' | 'triggerEnd' | 'element', null>;\n// PixelConverters are executed and their values returned during computation\nexport type PrivateComputed = ModifyProperty<\n\tPrivate,\n\t'triggerStart' | 'triggerEnd' | 'elementStart' | 'elementEnd',\n\tnumber\n>;\n\n// default options\nexport const defaults: Public = {\n\telement: null,\n\tscrollParent: window,\n\tvertical: true,\n\ttriggerStart: null,\n\ttriggerEnd: null,\n\telementStart: 0,\n\telementEnd: 0,\n};\n\n// applied during fallback inference. if triggerStart or triggerEnd is null this will apply default if element is present and fallback otherwise\nexport const inferredTriggers: Record<string, PixelConverterElement> = {\n\tdefault: (scrollParentSize: number) => scrollParentSize, // default 100%, starts at bottom, ends at top\n\tfallback: () => 0, // if no element is supplied, it will fall back to the first child of scroll parent (usually the body), so it starts at the top and ends at the bottom\n};\n","const verticalProps = {\n\tstart: 'top',\n\tend: 'bottom',\n\tsize: 'height',\n\tclientSize: 'clientHeight',\n\tscrollSize: 'scrollHeight',\n\tscrollDelta: 'deltaY',\n} as const;\nconst horizontalProps = {\n\tstart: 'left',\n\tend: 'right',\n\tsize: 'width',\n\tclientSize: 'clientWidth',\n\tscrollSize: 'scrollWidth',\n\tscrollDelta: 'deltaX',\n} as const;\n\ntype VerticalProps = typeof verticalProps;\ntype HorizontalProps = typeof horizontalProps;\ntype Props = keyof VerticalProps & keyof HorizontalProps;\ntype SourceProps = VerticalProps[Props] | HorizontalProps[Props];\ntype RectInfo = Record<SourceProps, number>;\n\ntype MatchType<T, P, K extends keyof T & keyof P> = T[K] extends P[K] ? T[K] : undefined;\n\n/**\n * Returns the relevant property names depending on vertical or horizontal orientation.\n * @param vertical scrolldirection (true = vertical)\n */\nexport const pickRelevantProps = (vertical: boolean): VerticalProps | HorizontalProps =>\n\tvertical ? verticalProps : horizontalProps;\n/**\n * Returns the relevant boundary values depending on vertical or horizontal orientation.\n * I.E. top or left value => start, width / height => size.\n * @param obj Object to tretrieve the values from\n * @param vertical scrolldirection (true = vertical)\n */\nexport const pickRelevantValues = <T extends Partial<RectInfo>, V extends boolean>(\n\tvertical: V,\n\tobj: T\n\t// the idea with the return type is to make sure each property has the correct type based on the object that is passed in.\n\t// i.e. if both top and left exist -> number, if only top exists -> number | undefined, if neither exist -> undefined.\n): { [X in Props]: MatchType<T, RectInfo, VerticalProps[X]> | MatchType<T, RectInfo, HorizontalProps[X]> } =>\n\tObject.entries(pickRelevantProps(vertical)).reduce((res, [key, value]) => {\n\t\treturn {\n\t\t\t...res,\n\t\t\t[key]: obj[value],\n\t\t};\n\t}, {} as { [X in Props]: MatchType<T, RectInfo, VerticalProps[X]> | MatchType<T, RectInfo, HorizontalProps[X]> });\n","import { failWith } from 'scrollmagic/ScrollMagicError';\n\n// type to ensure there's an output processor for every input\nexport type PropertyProcessors<I extends { [X in keyof I]: unknown }, O extends { [X in keyof I]: unknown }> = {\n\t[X in keyof I]: (value: Required<I>[X]) => O[X];\n};\n\n/**\n * A function that can be used to validate the properties of an object based on predefined rules.\n * @param obj the object that should be processed\n * @param processors an object with matching keys, which defines how to normalize and or validate a property\n * @param getErrorMessage A function that returns the format for the error message, should normalize or check fail.\n * @returns the normalized and checked object\n */\n\nconst processProperties = <\n\tI extends { [X in keyof I]: any },\n\tP extends { [X in K]?: (value: Required<I>[X]) => any },\n\tO extends { [X in K]: P[X] extends (...args: any) => infer R ? R : I[X] },\n\tK extends keyof I\n>(\n\tobj: I,\n\tprocessors: P,\n\tgetErrorMessage: (value: unknown, prop: keyof I, reason?: string) => string = (value, prop, reason) =>\n\t\t`Invalid value ${value} for ${prop}. ${reason}`\n): O => {\n\treturn Object.keys(obj).reduce((result, key) => {\n\t\tconst prop = key as K;\n\t\tconst value = obj[prop];\n\t\tconst processor = processors[prop];\n\t\tlet processedValue: O[K];\n\t\ttry {\n\t\t\tprocessedValue = processor?.(value) ?? value;\n\t\t} catch (e) {\n\t\t\tthrow failWith(getErrorMessage(value, prop, e.message));\n\t\t}\n\t\tresult[prop] = processedValue;\n\t\treturn result;\n\t}, {} as O);\n};\nexport default processProperties;\n","import { failWith } from 'scrollmagic/ScrollMagicError';\n\nimport {\n\tisDocument,\n\tisHTMLElement,\n\tisNull,\n\tisNumber,\n\tisSVGElement,\n\tisString,\n\tisUndefined,\n\tisWindow,\n} from './typeguards';\n\ntype PixelConverter = (size: number) => number;\ntype UnitString = `${number}px` | `${number}%`;\n\nconst centerShorthand = 'center';\n\nexport const numberToPercString = (val: number): string => `${val * 100}%`;\n\nconst unitTupleToPixelConverter = ([value, unit]: [number, 'px' | '%']): PixelConverter => {\n\treturn unit === 'px' ? () => value : (size: number) => (value / 100) * size;\n};\n\nexport const unitStringToPixelConverter = (val: UnitString): PixelConverter => {\n\tconst match = val.match(/^([+-])?(\\d+|\\d*[.]\\d+)(%|px)$/);\n\tif (isNull(match)) {\n\t\tthrow failWith(`String value must be number with unit, i.e. 20px or 80% or '${centerShorthand}' (=50%)`);\n\t}\n\tconst [, sign, digits, unit] = match as [string, '+' | '-' | null, string, 'px' | '%'];\n\treturn unitTupleToPixelConverter([parseFloat(`${sign ?? ''}${digits}`), unit]);\n};\n\nexport const toPixelConverter = (\n\tval: number | UnitString | typeof centerShorthand | PixelConverter\n): PixelConverter => {\n\tif (isNumber(val)) {\n\t\treturn () => val;\n\t}\n\tif (isString(val)) {\n\t\tif (centerShorthand === val) {\n\t\t\tconst x = unitTupleToPixelConverter([50, '%']);\n\t\t\treturn x;\n\t\t}\n\t\treturn unitStringToPixelConverter(val);\n\t}\n\t// ok, probably passed in function, let's see if it works.\n\tlet returnsNumber: boolean;\n\ttry {\n\t\treturnsNumber = isNumber(val(1));\n\t} catch (e) {\n\t\tthrow failWith('Unsupported value type');\n\t}\n\tif (!returnsNumber) {\n\t\tthrow failWith('Function must return a number');\n\t}\n\treturn val;\n};\n\nexport const selectorToSingleElement = (selector: string): Element => {\n\tconst elem = document.querySelector(selector);\n\tif (isNull(elem)) {\n\t\tthrow failWith(`No element found for selector ${selector}`);\n\t}\n\treturn elem;\n};\n\nexport const toSvgOrHtmlElement = (reference: Element | string): HTMLElement | SVGElement => {\n\tconst elem = isString(reference) ? selectorToSingleElement(reference) : reference;\n\tconst { body } = window.document;\n\tif (!(isHTMLElement(elem) || isSVGElement(elem)) || !body.contains(elem)) {\n\t\tthrow failWith('Invalid element supplied');\n\t}\n\treturn elem;\n};\n\nexport const toValidScrollParent = (container: Window | Document | Element | string): Window | HTMLElement => {\n\tif (isWindow(container) || isDocument(container)) {\n\t\treturn window;\n\t}\n\tconst elem = toSvgOrHtmlElement(container);\n\tif (isSVGElement(elem)) {\n\t\tthrow failWith(`Can't use SVG as scrollParent`);\n\t}\n\treturn elem;\n};\n\n// returns null if null is passed in or returns the return value of the function that's passed in.\nexport const nullPassThrough = <F extends (val: any) => any>(\n\tfunc: F\n): ((val: Parameters<F>[0] | null) => ReturnType<F> | null) => (val: Parameters<F>[0] | null) =>\n\tisNull(val) ? val : func(val);\n\n// checks if a value is null and returns it, if it is not.\n// if it is, it runs a function to recover a value\nexport const toNonNullable = <T extends unknown>(val: T, recover: () => NonNullable<T>): NonNullable<T> =>\n\tisNull(val) || isUndefined(val) ? recover() : (val as NonNullable<T>);\n\nexport const toBoolean = (val: unknown): boolean => !!val;\n","import {\n\tPixelConverterScrollParent,\n\tPrivate,\n\tPrivateComputed,\n\tPrivateUninferred,\n\tPublic,\n\tinferredTriggers,\n\tdefaults as optionDefaults,\n} from './Options';\nimport { failWith, warn } from './ScrollMagicError';\nimport getDimensions from './util/getDimensions';\nimport { pickRelevantValues } from './util/pickRelevantInfo';\nimport processProperties, { PropertyProcessors } from './util/processProperties';\nimport { sanitizeProperties } from './util/sanitizeProperties';\nimport {\n\tnullPassThrough,\n\ttoBoolean,\n\ttoNonNullable,\n\ttoPixelConverter,\n\ttoSvgOrHtmlElement,\n\ttoValidScrollParent,\n} from './util/transformers';\nimport { isHTMLElement, isNull, isSVGElement, isWindow } from './util/typeguards';\n\nconst transformers: PropertyProcessors<Public, PrivateUninferred> = {\n\telement: nullPassThrough(toSvgOrHtmlElement),\n\tscrollParent: toValidScrollParent,\n\tvertical: toBoolean,\n\ttriggerStart: nullPassThrough(toPixelConverter),\n\ttriggerEnd: nullPassThrough(toPixelConverter),\n\telementStart: toPixelConverter,\n\telementEnd: toPixelConverter,\n};\n\n// removes unknown properties from supplied options\nexport const sanitize = <T extends Partial<Public>>(options: T): T => sanitizeProperties(options, optionDefaults);\n\n// converts all public values to their corresponding private value, leaving null values untoched\nconst transform = (options: Partial<Public>): Partial<PrivateUninferred> => processProperties(options, transformers);\n\n// processes remaining null values\nconst infer = (options: PrivateUninferred): Private => {\n\tconst { scrollParent, element } = options;\n\n\tconst inferElement = (elem: HTMLElement | SVGElement | null) =>\n\t\ttoNonNullable(elem, () => {\n\t\t\tconst elem = isWindow(scrollParent) ? document.body : scrollParent.firstElementChild;\n\t\t\tif (isNull(elem) || !(isHTMLElement(elem) || isSVGElement(elem))) {\n\t\t\t\tthrow failWith(`Could not autodetect element, as scrollParent has no valid children.`);\n\t\t\t}\n\t\t\treturn elem;\n\t\t});\n\n\tconst inferTrigger = (val: PixelConverterScrollParent | null) =>\n\t\ttoNonNullable(val, () => (isNull(element) ? inferredTriggers.fallback : inferredTriggers.default));\n\n\treturn processProperties(options, {\n\t\telement: inferElement,\n\t\ttriggerStart: inferTrigger,\n\t\ttriggerEnd: inferTrigger,\n\t});\n};\n\n// checks if the options the user entered actually make sense\nconst check = (options: Private): void => {\n\tconst { triggerStart, triggerEnd, elementStart, elementEnd, vertical, scrollParent } = options;\n\tconst { size: elementSize } = getElementSize(options);\n\tconst { clientSize: containerSize } = pickRelevantValues(vertical, getDimensions(scrollParent));\n\n\tconst elementDistance = elementSize - elementStart(elementSize) - elementEnd(elementSize);\n\tconst trackDistance = -(containerSize - triggerStart(containerSize) - triggerEnd(containerSize));\n\n\tconst total = elementDistance + trackDistance;\n\tif (total < 0) {\n\t\twarn(\n\t\t\t'Detected no overlap with the configured track options. This means ScrollMagic will not trigger unless this changes later on (i.e. due to resizes).',\n\t\t\tcompute(options)\n\t\t);\n\t}\n};\n\nexport const compute = (options: Private): PrivateComputed => {\n\tconst { triggerStart, triggerEnd, elementStart, elementEnd } = options;\n\tconst { size: elementSize } = getElementSize(options);\n\treturn {\n\t\t...options,\n\t\ttriggerStart: triggerStart(elementSize),\n\t\ttriggerEnd: triggerEnd(elementSize),\n\t\telementStart: elementStart(elementSize),\n\t\telementEnd: elementEnd(elementSize),\n\t};\n};\n\nexport const process = <T extends Partial<Public>>(\n\tnewOptions: T,\n\toldOptions: Private\n): { sanitized: T; processed: Private } => {\n\tconst sanitized = sanitize(newOptions);\n\tconst normalized = transform(sanitized);\n\tconst processed = infer({ ...oldOptions, ...normalized });\n\tcheck(processed); // finally sanity check\n\treturn { sanitized, processed };\n};\n\n// helpers\nconst getElementSize = ({ vertical, element }: Pick<Private, 'vertical' | 'element'>) =>\n\tpickRelevantValues(vertical, element.getBoundingClientRect());\n","import { warn } from 'scrollmagic/ScrollMagicError';\n\nexport const sanitizeProperties = <T extends Record<string, any>>(\n\tobj: T,\n\tdefaults: Record<string, any>,\n\tonUnknown = (propertyName: string) => {\n\t\twarn(`Unknown property ${propertyName} will be disregarded`);\n\t}\n): T =>\n\tObject.entries(obj).reduce((res, [key, value]) => {\n\t\tif (key in defaults === false) {\n\t\t\tonUnknown?.(key);\n\t\t\treturn res;\n\t\t}\n\t\tres[key as keyof T] = value;\n\t\treturn res;\n\t}, {} as T);\n","const fromEntries = <T extends { [key: string]: any }>(obj: T, [key, value]: [string, any]) => ({\n\t...obj,\n\t[key]: value,\n});\n// checks an object against a reference object and returns a new object containing only differences in direct descendents (one way!)\nconst pickDifferencesFlat = <T extends Record<string, any>>(part: Partial<T>, full: T): Partial<T> =>\n\tObject.entries(part)\n\t\t.filter(([key, value]) => value !== full[key])\n\t\t.reduce(fromEntries, {});\nexport default pickDifferencesFlat;\n","export const roundToDecimals = (val: number, decimals: number): number => parseFloat(val.toFixed(decimals));\n","import pickDifferencesFlat from './util/pickDifferencesFlat';\nimport { isUndefined } from './util/typeguards';\n\ntype Margin = {\n\ttop: string;\n\tright: string;\n\tbottom: string;\n\tleft: string;\n};\n\ninterface Options {\n\troot?: Element | null; // null is window\n\tmargin?: Margin;\n}\n\ntype ObserverCallback = (isIntersecting: boolean, target: Element) => void;\n\n// this ensures the order in the object doesn't matter\nconst marginObjToString = ({ top, right, bottom, left }: Margin) => [top, right, bottom, left].join(' ');\n\nconst none = '0px';\n\nexport default class ViewportObserver {\n\tprivate observerEnter?: IntersectionObserver;\n\tprivate observerLeave?: IntersectionObserver;\n\tprivate options: Required<Options> = {\n\t\troot: null,\n\t\tmargin: { top: none, right: none, bottom: none, left: none },\n\t};\n\tprivate observedElements = new Map<Element, [boolean | undefined, boolean | undefined]>();\n\tconstructor(private callback: ObserverCallback, options?: Options) {\n\t\tif (isUndefined(options)) {\n\t\t\treturn; // nothing will happen, until modify is called.\n\t\t}\n\t\tthis.options = {\n\t\t\t...this.options,\n\t\t\t...options,\n\t\t};\n\t}\n\tprivate observerCallback(entries: IntersectionObserverEntry[], observer: IntersectionObserver) {\n\t\tentries.forEach(({ target, isIntersecting }) => {\n\t\t\tlet [hitEnter, hitLeave] = this.observedElements.get(target) ?? [];\n\t\t\tconst prevState = hitEnter && hitLeave;\n\t\t\tif (observer === this.observerEnter) {\n\t\t\t\thitEnter = isIntersecting;\n\t\t\t} else {\n\t\t\t\thitLeave = isIntersecting;\n\t\t\t}\n\t\t\tthis.observedElements.set(target, [hitEnter, hitLeave]);\n\t\t\tconst newState = hitEnter && hitLeave;\n\t\t\tif (isUndefined(newState) || prevState === newState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.callback(newState, target);\n\t\t});\n\t}\n\tprivate createObserver(rootMargin: string) {\n\t\tconst root = this.options.root;\n\t\tconst observer = new IntersectionObserver(this.observerCallback.bind(this), { root, rootMargin });\n\t\t[...this.observedElements.keys()].forEach(elem => observer.observe(elem));\n\t\treturn observer;\n\t}\n\tprivate rebuildObserver() {\n\t\tthis.observerEnter?.disconnect();\n\t\tthis.observerLeave?.disconnect();\n\t\tconst { margin } = this.options;\n\t\tconst maxDimension = (val: string) => `${Math.max(0, parseFloat(val))}%`;\n\n\t\t// TODO: check what happens, if the opposite value still overlaps (due to offset / height ?)\n\t\t// TODO! I know now: if effective duration exceeds available observer height it fails... -> BUG! -> FIX...\n\t\tconst marginEnter = { ...margin, top: maxDimension(margin.top) };\n\t\tconst marginLeave = { ...margin, bottom: maxDimension(margin.bottom) };\n\n\t\tthis.observerEnter = this.createObserver(marginObjToString(marginEnter));\n\t\tthis.observerLeave = this.createObserver(marginObjToString(marginLeave));\n\t}\n\tprivate optionsChanged({ root, margin }: Options) {\n\t\tif (!isUndefined(root) && root !== this.options.root) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!isUndefined(margin)) {\n\t\t\treturn Object.keys(pickDifferencesFlat(margin, this.options.margin)).length > 0;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic modify(options: Options): ViewportObserver {\n\t\tif (!this.optionsChanged(options)) {\n\t\t\treturn this;\n\t\t}\n\t\tthis.options = {\n\t\t\t...this.options,\n\t\t\t...options,\n\t\t};\n\t\tthis.rebuildObserver();\n\t\treturn this;\n\t}\n\tpublic observe(elem: Element): ViewportObserver {\n\t\tif (!this.observedElements.has(elem)) {\n\t\t\tthis.observedElements.set(elem, [undefined, undefined]);\n\t\t\tthis.observerEnter?.observe(elem);\n\t\t\tthis.observerLeave?.observe(elem);\n\t\t}\n\t\treturn this;\n\t}\n\tpublic unobserve(elem: Element): ViewportObserver {\n\t\tif (this.observedElements.has(elem)) {\n\t\t\tthis.observedElements.delete(elem);\n\t\t\tthis.observerEnter?.unobserve(elem);\n\t\t\tthis.observerLeave?.unobserve(elem);\n\t\t}\n\t\treturn this;\n\t}\n\tpublic disconnect(): void {\n\t\tthis.observedElements.clear();\n\t\tthis.observerEnter?.disconnect();\n\t\tthis.observerLeave?.disconnect();\n\t}\n}\n","import { ContainerEvent } from './Container';\nimport { ContainerProxy } from './ContainerProxy';\nimport EventDispatcher from './EventDispatcher';\nimport { ExecutionQueue } from './ExecutionQueue';\nimport * as Options from './Options';\nimport {\n\tcompute as computeOptions,\n\tprocess as processOptions,\n\tsanitize as sanitizeOptions,\n} from './Options.processors';\nimport ScrollMagicEvent, { ScrollMagicEventType } from './ScrollMagicEvent';\nimport debounce from './util/debounce';\nimport getScrollPos from './util/getScrollPos';\nimport pickDifferencesFlat from './util/pickDifferencesFlat';\nimport { pickRelevantProps, pickRelevantValues } from './util/pickRelevantInfo';\nimport { roundToDecimals } from './util/roundToDecimals';\nimport throttleRaf from './util/throttleRaf';\nimport { numberToPercString } from './util/transformers';\nimport { isUndefined, isWindow } from './util/typeguards';\nimport ViewportObserver from './ViewportObserver';\n\nexport { Public as ScrollMagicOptions } from './Options';\n\n// used for listeners to allow the value to be passed in either from the enum or as a string literal\ntype EventTypeEnumOrUnion = ScrollMagicEventType | `${ScrollMagicEventType}`;\ntype ElementBounds = {\n\tstart: number; //\t\tposition relative to viewport\n\toffsetStart: number; // offset relative to top/left of element\n\toffsetEnd: number; // \toffset relative to bottom/right of element\n\tsize: number; // \t\tactual size of element\n\ttrackSize: number; // \ttotal size including offsets\n};\nexport class ScrollMagic {\n\tpublic readonly name = 'ScrollMagic';\n\n\tprivate readonly dispatcher = new EventDispatcher();\n\tprivate readonly container = new ContainerProxy(this);\n\tprivate readonly resizeObserver = new ResizeObserver(throttleRaf(this.onElementResize.bind(this)));\n\tprivate readonly viewportObserver = new ViewportObserver(this.onIntersectionChange.bind(this));\n\tprivate readonly executionQueue = new ExecutionQueue({\n\t\t// The order is important here! They will always be executed in exactly this order when scheduled for the same animation frame\n\t\telementBounds: this.updateElementBoundsCache.bind(this),\n\t\tviewportObserver: this.updateViewportObserver.bind(this),\n\t\tprogress: this.updateProgress.bind(this),\n\t});\n\tprivate readonly update = this.executionQueue.commands; // not sure this is good style, but I kind of don't want to write this.executionQueue.commands every time...\n\tprivate readonly debouncedOnFastScrollDetected = debounce(this.onFastScrollDetected.bind(this), 100); // why 100? because.\n\n\t// all below options should only ever be changed by a dedicated method\n\t// update function MUST NOT call any other functions, with the exceptions of modify\n\tprivate optionsPublic: Options.Public = ScrollMagic.defaultOptionsPublic;\n\tprivate optionsPrivate!: Options.Private; // set in modify in constructor\n\tprivate elementBoundsCache: ElementBounds = {\n\t\t// see typedef for details\n\t\tstart: 0,\n\t\toffsetStart: 0,\n\t\toffsetEnd: 0,\n\t\tsize: 0,\n\t\ttrackSize: 0,\n\t};\n\tprivate currentProgress = 0;\n\tprivate intersecting?: boolean; // is the scene currently intersecting with the ViewportObserver?\n\n\t// TODO: properly react to mobile headers resizing\n\t// TODO: build plugin interface\n\t// TODO: consider what should actually be private and what protected.\n\t// TODO: Maybe only include internal errors for development? process.env...\n\tconstructor(options: Partial<Options.Public> = {}) {\n\t\tconst initOptions: Options.Public = {\n\t\t\t...ScrollMagic.defaultOptionsPublic,\n\t\t\t...options,\n\t\t};\n\t\tthis.modify(initOptions);\n\t}\n\n\tprivate triggerEvent(type: ScrollMagicEventType, deltaProgress: number) {\n\t\tif (deltaProgress === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis.dispatcher.dispatchEvent(new ScrollMagicEvent(this, type, deltaProgress > 0));\n\t}\n\n\tpublic modify(options: Partial<Options.Public>): ScrollMagic {\n\t\tconst { sanitized, processed } = processOptions(options, this.optionsPrivate);\n\n\t\tthis.optionsPublic = { ...this.optionsPublic, ...sanitized };\n\n\t\tconst changed = isUndefined(this.optionsPrivate) // internal options not set on first run, so all changed\n\t\t\t? processed\n\t\t\t: pickDifferencesFlat(processed, this.optionsPrivate);\n\t\tconst changedOptions = Object.keys(changed) as Array<keyof Options.Private>;\n\n\t\tif (changedOptions.length === 0) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.optionsPrivate = processed;\n\n\t\tthis.onOptionChanges(changedOptions);\n\t\treturn this;\n\t}\n\n\tprivate getViewportMargin() {\n\t\tconst { triggerStart, triggerEnd, vertical } = this.optionsPrivate;\n\t\tconst { start: startProp, end: endProp } = pickRelevantProps(vertical);\n\t\tconst { start: oppositeStartProp, end: oppositeEndProp } = pickRelevantProps(!vertical);\n\t\tconst { clientSize: containerSize } = this.getContainerBounds();\n\t\tconst { scrollSize: oppositeScrollSize, clientSize: oppositeClientSize } = this.getContainerBounds(!vertical); // gets the opposites\n\t\tconst { offsetStart, offsetEnd } = this.elementBoundsCache; // from cache\n\n\t\tconst marginStart = containerSize - triggerStart(containerSize) + offsetStart;\n\t\tconst marginEnd = containerSize - triggerEnd(containerSize) + offsetEnd;\n\t\t/**\n\t\t ** confusingly IntersectionObserver (and thus ViewportObserver) treat margins in the opposite direction (negative means towards the center)\n\t\t ** so we'll have to flip the signs here.\n\t\t ** Additionally we convert it to percentages and round, as this means they are less likely to change, meaning less refreshes for the observer\n\t\t ** (as the observer internally compares old values to new ones)\n\t\t ** This way it won't have to internally create new IntersectionObservers, just because the scrollparent's size changes.\n\t\t */\n\t\tconst relMarginStart = -roundToDecimals(marginStart / containerSize, 5);\n\t\tconst relMarginEnd = -roundToDecimals(marginEnd / containerSize, 5);\n\n\t\t// adding available scrollspace in opposite direction, so element never moves out of trackable area, even when scrolling horizontally on a vertical scene\n\t\tconst scrollableOpposite = numberToPercString((oppositeScrollSize - oppositeClientSize) / oppositeClientSize);\n\t\treturn {\n\t\t\t// the start and end values are intentionally flipped here (start value defines end margin and vice versa)\n\t\t\t[endProp]: numberToPercString(relMarginStart),\n\t\t\t[startProp]: numberToPercString(relMarginEnd),\n\t\t\t[oppositeStartProp]: scrollableOpposite,\n\t\t\t[oppositeEndProp]: scrollableOpposite,\n\t\t} as Record<'top' | 'left' | 'bottom' | 'right', string>;\n\t}\n\n\tprivate getElementBounds(): ElementBounds {\n\t\t// this should be called cautiously, getBoundingClientRect costs...\n\t\t// check variable initialisation for property description\n\t\tconst { elementStart, elementEnd, element, vertical } = this.optionsPrivate;\n\t\tconst { start, size: elementSize } = pickRelevantValues(vertical, element.getBoundingClientRect());\n\t\tconst offsetStart = elementStart(elementSize);\n\t\tconst offsetEnd = elementEnd(elementSize);\n\t\treturn {\n\t\t\tstart,\n\t\t\toffsetStart,\n\t\t\toffsetEnd,\n\t\t\tsize: elementSize,\n\t\t\ttrackSize: elementSize - offsetStart - offsetEnd,\n\t\t};\n\t}\n\n\tprivate getContainerBounds(forceDirection?: boolean) {\n\t\treturn pickRelevantValues(forceDirection ?? this.optionsPrivate.vertical, this.container.rect); // these are already cached. fine to call as often as we like\n\t}\n\n\tprivate updateIntersecting(nextIntersecting: boolean | undefined) {\n\t\t// doesn't have to be a method, but I want to keep modifications obvious (only called from update... methods)\n\t\tthis.intersecting = nextIntersecting;\n\t}\n\n\tprivate updateElementBoundsCache() {\n\t\t// console.log(this.optionsPrivate.element.id, 'bounds', new Date().getMilliseconds());\n\t\tthis.elementBoundsCache = this.getElementBounds();\n\t}\n\n\tprivate updateProgress() {\n\t\t// console.log(this.optionsPrivate.element.id, 'progress', new Date().getMilliseconds());\n\t\tconst { triggerStart, triggerEnd } = this.optionsPrivate;\n\t\tconst { offsetStart, trackSize: elementDistance, start: elementPosition } = this.elementBoundsCache;\n\t\tconst { clientSize: containerSize } = this.getContainerBounds();\n\n\t\tconst containerOffsetStart = triggerStart(containerSize);\n\t\tconst containerOffsetEnd = triggerEnd(containerSize);\n\t\tconst start = elementPosition + offsetStart;\n\t\tconst trackDistance = -(containerSize - containerOffsetStart - containerOffsetEnd);\n\n\t\tconst passed = containerOffsetStart - start;\n\t\tconst total = elementDistance + trackDistance;\n\n\t\tif (total < 0) {\n\t\t\t// no overlap of track and scroll distance\n\t\t\treturn;\n\t\t}\n\n\t\tconst previousProgress = this.currentProgress;\n\t\tconst nextProgress = Math.min(Math.max(passed / total, 0), 1); // when leaving, it will overshoot, this normalises to 0 / 1\n\t\tconst deltaProgress = nextProgress - previousProgress;\n\n\t\tthis.currentProgress = nextProgress;\n\n\t\tif (previousProgress === 0 || previousProgress === 1) {\n\t\t\tthis.triggerEvent(ScrollMagicEventType.Enter, deltaProgress);\n\t\t}\n\t\tthis.triggerEvent(ScrollMagicEventType.Progress, deltaProgress);\n\t\tif (nextProgress === 0 || nextProgress === 1) {\n\t\t\tthis.triggerEvent(ScrollMagicEventType.Leave, deltaProgress);\n\t\t}\n\t}\n\n\tprivate updateViewportObserver(): void {\n\t\tconst { scrollParent } = this.optionsPrivate;\n\t\tconst observerOptions = {\n\t\t\tmargin: this.getViewportMargin(),\n\t\t\troot: isWindow(scrollParent) ? null : scrollParent,\n\t\t};\n\t\tthis.viewportObserver.modify(observerOptions);\n\t}\n\n\tprivate onOptionChanges(changes: Array<keyof Options.Private>) {\n\t\tconst isChanged = changes.includes.bind(changes);\n\t\tconst sizeChanged = isChanged('elementStart');\n\t\tconst offsetChanged = isChanged('elementEnd');\n\t\tconst elementChanged = isChanged('element');\n\t\tconst scrollParentChanged = isChanged('scrollParent');\n\n\t\tif (sizeChanged || offsetChanged || elementChanged) {\n\t\t\tthis.update.elementBounds.schedule();\n\t\t\tif (elementChanged) {\n\t\t\t\tthis.updateIntersecting(undefined);\n\t\t\t\tconst { element } = this.optionsPrivate;\n\t\t\t\tthis.viewportObserver.disconnect();\n\t\t\t\tthis.viewportObserver.observe(element);\n\t\t\t\tthis.resizeObserver.disconnect();\n\t\t\t\tthis.resizeObserver.observe(element);\n\t\t\t}\n\t\t}\n\t\tif (scrollParentChanged) {\n\t\t\tthis.updateIntersecting(undefined);\n\t\t\tthis.container.attach(this.optionsPrivate.scrollParent, this.onContainerUpdate.bind(this)); // container updates are already throttled\n\t\t}\n\t\t// if the options change we always have to refresh the viewport observer, regardless which one it is...\n\t\tthis.update.viewportObserver.schedule();\n\t}\n\n\tprivate onElementResize() {\n\t\t/**\n\t\t * * element resized\n\t\t * updateElementBounds => schedule always (obviously),\texecute regardless.\n\t\t * updateViewportObserver => schedule always, \t\t\texecute if start or end offset changed in trigger bounds update above\n\t\t * updateProgress => schedule if currently intersecting,\t\texecute if start or end offset changed in trigger bounds update above\n\t\t */\n\t\tconst { update, elementBoundsCache } = this;\n\t\tconst { offsetStart: startPrevious, offsetEnd: endPrevious } = elementBoundsCache;\n\t\tconst isBoundsChanged = () =>\n\t\t\tstartPrevious !== elementBoundsCache.offsetStart || endPrevious !== elementBoundsCache.offsetEnd;\n\t\tupdate.elementBounds.schedule();\n\t\tupdate.viewportObserver.schedule(isBoundsChanged);\n\t\tif (this.intersecting) {\n\t\t\tupdate.progress.schedule(isBoundsChanged);\n\t\t}\n\t}\n\n\tprivate onContainerUpdate(e: ContainerEvent) {\n\t\t/**\n\t\t * * container resized\n\t\t * updateElementBounds => \t\tschedule if currently intersecting, \texecute regardless (resizes are caught in onElementResize but position might change due to container resize, which wouldn't be)\n\t\t * updateViewportObserver => \tschedule always (to get new margins),\texecute regardless.\n\t\t * updateProgress => \t\t\tschedule if currently intersecting, \texecute if position changed in triggerBounds update\n\t\t */\n\t\tconst { update, intersecting } = this;\n\t\tif ('resize' === e.type) {\n\t\t\tif (intersecting) {\n\t\t\t\tupdate.elementBounds.schedule();\n\t\t\t}\n\t\t\tupdate.viewportObserver.schedule();\n\t\t\tconst { start: startPrevious } = this.elementBoundsCache;\n\t\t\tconst isPositionChanged = () => startPrevious !== this.elementBoundsCache.start;\n\t\t\tupdate.progress.schedule(isPositionChanged);\n\t\t\treturn;\n\t\t}\n\t\t/**\n\t\t * * container scrolled\n\t\t * if relevant scrollDelta is 0, do nothing (scroll was in other direction)\n\t\t * updateElementBounds =>\t\tschedule if currently intersecting,\t\texecute regardless\n\t\t * updateViewportObserver => \tnever\n\t\t * updateProgress =>\t\t\tschedule if currently intersecting, \texecute regardless (technically only execute if triggerBounds returned a new position, but that's implied, if there was a scoll move in the relevant direction)\n\t\t */\n\t\tconst { scrollDelta } = pickRelevantValues(this.optionsPrivate.vertical, e.scrollDelta);\n\t\t// TODO! fix fast scroll detection - currently only element track is used, but viewport track should be added\n\t\tif (!this.intersecting && Math.abs(scrollDelta) > Math.abs(this.elementBoundsCache.trackSize)) {\n\t\t\t// in case the scroll position changes by more than the track distance, the viewport observer might miss it.\n\t\t\t// this can trigger multiple times, if the user jumps from page top to bottom, so we need to debounce it.\n\t\t\tthis.debouncedOnFastScrollDetected();\n\t\t}\n\t\tif (0 === scrollDelta || !this.intersecting) {\n\t\t\treturn;\n\t\t}\n\t\tupdate.elementBounds.schedule();\n\t\tupdate.progress.schedule();\n\t}\n\n\tprivate onIntersectionChange(intersecting: boolean, target: Element) {\n\t\t/**\n\t\t * * intersection state changed\n\t\t * updateElementBounds =>\t\tnever (would be caught by onElementResize or onContainerUpdate)\n\t\t * updateViewportObserver =>\tnever\n\t\t * updateProgress =>\t\t\tschedule regardless, execute regardless\n\t\t */\n\t\t// the check below should always be true, as we only ever observe one element, but you can never be too sure, I guess...\n\t\tif (target === this.optionsPrivate.element) {\n\t\t\tthis.updateIntersecting(intersecting);\n\t\t\tthis.update.progress.schedule();\n\t\t}\n\t}\n\n\tprivate onFastScrollDetected() {\n\t\t/**\n\t\t * * fast scroll detected\n\t\t * * this means the ViewportObserver might \"miss\", that we passed the scene\n\t\t * updateElementBounds => schedule regardless, execute regardless\n\t\t * updateViewportObserver => never\n\t\t * updateProgress => schedule regardless, execute regardless\n\t\t */\n\t\t// console.log('fastScroll!');\n\t\tthis.update.elementBounds.schedule();\n\t\tthis.update.progress.schedule();\n\t}\n\n\t// getter/setter public\n\tpublic set element(element: Options.Public['element']) {\n\t\tthis.modify({ element });\n\t}\n\tpublic get element(): Options.Public['element'] {\n\t\treturn this.optionsPublic.element;\n\t}\n\tpublic set scrollParent(scrollParent: Options.Public['scrollParent']) {\n\t\tthis.modify({ scrollParent });\n\t}\n\tpublic get scrollParent(): Options.Public['scrollParent'] {\n\t\treturn this.optionsPublic.scrollParent;\n\t}\n\tpublic set vertical(vertical: Options.Public['vertical']) {\n\t\tthis.modify({ vertical });\n\t}\n\tpublic get vertical(): Options.Public['vertical'] {\n\t\treturn this.optionsPublic.vertical;\n\t}\n\tpublic set triggerStart(triggerStart: Options.Public['triggerStart']) {\n\t\tthis.modify({ triggerStart });\n\t}\n\tpublic get triggerStart(): Options.Public['triggerStart'] {\n\t\treturn this.optionsPublic.triggerStart;\n\t}\n\tpublic set triggerEnd(triggerEnd: Options.Public['triggerEnd']) {\n\t\tthis.modify({ triggerEnd });\n\t}\n\tpublic get triggerEnd(): Options.Public['triggerEnd'] {\n\t\treturn this.optionsPublic.triggerEnd;\n\t}\n\tpublic set elementStart(elementStart: Options.Public['elementStart']) {\n\t\tthis.modify({ elementStart });\n\t}\n\tpublic get elementStart(): Options.Public['elementStart'] {\n\t\treturn this.optionsPublic.elementStart;\n\t}\n\tpublic set elementEnd(elementEnd: Options.Public['elementEnd']) {\n\t\tthis.modify({ elementEnd });\n\t}\n\tpublic get elementEnd(): Options.Public['elementEnd'] {\n\t\treturn this.optionsPublic.elementEnd;\n\t}\n\n\t// not an option -> getter only\n\tpublic get progress(): number {\n\t\treturn this.currentProgress;\n\t}\n\tpublic get scrollOffset(): { start: number; end: number } {\n\t\tconst { scrollParent, triggerStart, triggerEnd, vertical } = this.optionsPrivate;\n\t\tconst { start: elementPosition, offsetStart, trackSize } = this.getElementBounds(); // it's ok here to not use cached values\n\t\tconst { clientSize: containerSize } = this.getContainerBounds();\n\t\tconst { start: scrollOffset } = pickRelevantValues(vertical, getScrollPos(scrollParent));\n\n\t\tconst absolutePosition = elementPosition + scrollOffset;\n\t\tconst start = absolutePosition + offsetStart;\n\t\tconst end = start + trackSize;\n\t\treturn {\n\t\t\tstart: Math.floor(start - triggerStart(containerSize)),\n\t\t\tend: Math.ceil(end - containerSize + triggerEnd(containerSize)),\n\t\t};\n\t}\n\tpublic get computedOptions(): Options.PrivateComputed {\n\t\treturn computeOptions(this.optionsPrivate);\n\t}\n\n\t// event listener\n\tpublic on(type: EventTypeEnumOrUnion, cb: (e: ScrollMagicEvent) => void): ScrollMagic {\n\t\tthis.dispatcher.addEventListener(type as ScrollMagicEventType, cb);\n\t\treturn this;\n\t}\n\tpublic off(type: EventTypeEnumOrUnion, cb: (e: ScrollMagicEvent) => void): ScrollMagic {\n\t\tthis.dispatcher.removeEventListener(type as ScrollMagicEventType, cb);\n\t\treturn this;\n\t}\n\t// same as on, but returns a function to reverse the effect (remove the listener).\n\tpublic subscribe(type: EventTypeEnumOrUnion, cb: (e: ScrollMagicEvent) => void): () => void {\n\t\treturn this.dispatcher.addEventListener(type as ScrollMagicEventType, cb);\n\t}\n\n\tpublic destroy(): void {\n\t\tthis.executionQueue.cancel();\n\t\tthis.resizeObserver.disconnect();\n\t\tthis.viewportObserver.disconnect();\n\t\tthis.container.detach();\n\t}\n\n\t// static options/methods\n\n\tprivate static defaultOptionsPublic = Options.defaults;\n\t// get or change default options\n\tpublic static default(options: Partial<Options.Public> = {}): Options.Public {\n\t\tthis.defaultOptionsPublic = {\n\t\t\t...this.defaultOptionsPublic,\n\t\t\t...sanitizeOptions(options),\n\t\t};\n\t\treturn this.defaultOptionsPublic;\n\t}\n}\n"],"names":["ScrollMagicEventType","ScrollMagicEventScrollDirection","ScrollMagicEventLocation","isNumber","val","isString","isUndefined","undefined","isNull","isWindow","Window","isHTMLElement","HTMLElement","isSVGElement","SVGElement","this","Map","EventDispatcher","type","cb","list","callbacks","get","set","push","_this","removeEventListener","remaining","filter","registeredCallback","event","forEach","debounce","func","wait","timeoutId","debounced","_i","args","clearTimeout","window","setTimeout","apply","cancel","getDimensions","element","elem","document","documentElement","clientWidth","clientHeight","scrollHeight","scrollWidth","scrollTop","container","pageYOffset","scrollLeft","pageXOffset","getScrollPos","left","top","registerEvent","target","listener","options","addEventListener","bind","throttleRaf","requestId","scheduled","requestAnimationFrame","cancelAnimationFrame","scrollDelta","deltaX","deltaY","scrollParent","throttledScroll","updateScrollPos","throttledResize","updateDimensions","cleanups","subscribeScroll","subscribeResize","Container","prevScrollPos","scrollPos","dispatcher","dispatchEvent","ContainerEvent","dimensions","onResize","observer","ResizeObserver","observe","unobserve","onScroll","Object","cleanup","SM","message","_super","__extends","Error","ScrollMagicError","failWith","failWithInternal","ScrollMagicErrorInternal","warn","first","console","scene","ContainerProxy","onUpdate","detach","cache","Set","_a","__read","add","unsubscribers","subscribe","scenes","delete","unsubscribe","size","destroy","execute","onSchedule","QueueItem","condition","conditions","some","queueItems","commands","entries","reduce","res","_c","name","command","executeThrottled","ExecutionQueue","values","item","conditionsMet","resetConditions","defaults","vertical","triggerStart","triggerEnd","elementStart","elementEnd","inferredTriggers","default","scrollParentSize","fallback","verticalProps","start","end","clientSize","scrollSize","horizontalProps","pickRelevantProps","pickRelevantValues","obj","key","value","processProperties","processors","getErrorMessage","prop","reason","keys","result","processedValue","processor","e","numberToPercString","unitTupleToPixelConverter","_b","toPixelConverter","returnsNumber","match","sign","digits","unit","parseFloat","unitStringToPixelConverter","toSvgOrHtmlElement","reference","selector","querySelector","selectorToSingleElement","body","contains","nullPassThrough","toNonNullable","recover","transformers","Document","sanitize","onUnknown","propertyName","sanitizeProperties","optionDefaults","compute","elementSize","getElementSize","process","newOptions","oldOptions","sanitized","normalized","processed","inferTrigger","firstElementChild","infer","containerSize","check","getBoundingClientRect","movingForward","location","Progress","Inside","Enter","Leave","Start","End","direction","Forward","Reverse","fromEntries","pickDifferencesFlat","part","full","roundToDecimals","decimals","toFixed","marginObjToString","join","callback","root","margin","right","bottom","ViewportObserver","isIntersecting","observedElements","hitEnter","hitLeave","prevState","observerEnter","newState","rootMargin","IntersectionObserver","observerCallback","__spreadArray","disconnect","observerLeave","maxDimension","Math","max","marginEnter","marginLeave","createObserver","length","optionsChanged","rebuildObserver","has","clear","onElementResize","onIntersectionChange","elementBounds","updateElementBoundsCache","viewportObserver","updateViewportObserver","progress","updateProgress","executionQueue","onFastScrollDetected","ScrollMagic","defaultOptionsPublic","offsetStart","offsetEnd","trackSize","initOptions","modify","deltaProgress","ScrollMagicEvent","processOptions","optionsPrivate","optionsPublic","changed","changedOptions","onOptionChanges","startProp","endProp","_d","oppositeStartProp","oppositeEndProp","getContainerBounds","_e","oppositeScrollSize","oppositeClientSize","_f","elementBoundsCache","marginStart","marginEnd","relMarginStart","relMarginEnd","scrollableOpposite","forceDirection","rect","nextIntersecting","intersecting","getElementBounds","elementDistance","elementPosition","containerOffsetStart","passed","total","previousProgress","currentProgress","nextProgress","min","triggerEvent","observerOptions","getViewportMargin","changes","isChanged","includes","sizeChanged","offsetChanged","elementChanged","scrollParentChanged","update","schedule","updateIntersecting","resizeObserver","attach","onContainerUpdate","startPrevious","endPrevious","isBoundsChanged","abs","debouncedOnFastScrollDetected","startPrevious_1","floor","ceil","computeOptions","sanitizeOptions","Options.defaults"],"mappings":"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"}