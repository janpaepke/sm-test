import * as Options from './Options';
import ScrollMagicEvent, { ScrollMagicEventType } from './ScrollMagicEvent';
export { Public as ScrollMagicOptions } from './Options';
declare type EventTypeEnumOrUnion = ScrollMagicEventType | `${ScrollMagicEventType}`;
export declare class Scene {
    readonly name = "ScrollMagic";
    private static defaultOptionsPublic;
    private dispatcher;
    private container;
    private resizeObserver;
    private viewportObserver?;
    private optionsPublic;
    private optionsPrivate;
    private elementSize?;
    private active?;
    private currentProgress;
    private isNaturalIntersection;
    constructor(options?: Partial<Options.Public>);
    modify(options: Partial<Options.Public>): Scene;
    private updateActiveState;
    private getViewportMargin;
    private handleOptionChanges;
    private updateNaturalIntersection;
    private updateElementSize;
    private updateProgress;
    private updateViewportObserver;
    private onElementResize;
    private onContainerResize;
    private onIntersect;
    set element(element: Options.Public['element']);
    get element(): Options.Public['element'];
    set scrollParent(scrollParent: Options.Public['scrollParent']);
    get scrollParent(): Options.Public['scrollParent'];
    set vertical(vertical: Options.Public['vertical']);
    get vertical(): Options.Public['vertical'];
    set trackStart(trackStart: Options.Public['trackStart']);
    get trackStart(): Options.Public['trackStart'];
    set trackEnd(trackEnd: Options.Public['trackEnd']);
    get trackEnd(): Options.Public['trackEnd'];
    set offset(offset: Options.Public['offset']);
    get offset(): Options.Public['offset'];
    get progress(): number;
    static default(options?: Partial<Options.Public>): Options.Public;
    on(type: EventTypeEnumOrUnion, cb: (e: ScrollMagicEvent) => void): Scene;
    off(type: EventTypeEnumOrUnion, cb: (e: ScrollMagicEvent) => void): Scene;
    subscribe(type: EventTypeEnumOrUnion, cb: (e: ScrollMagicEvent) => void): () => void;
    destroy(): void;
}
//# sourceMappingURL=Scene.d.ts.map